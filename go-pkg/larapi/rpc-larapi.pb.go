// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc-larapi.proto

package larapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc-larapi.proto", fileDescriptor_375050a950c9a722) }

var fileDescriptor_375050a950c9a722 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2a, 0x48, 0xd6,
	0xcd, 0x49, 0x2c, 0x4a, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0,
	0xa4, 0x78, 0x90, 0x45, 0x8d, 0x2c, 0xb9, 0xd8, 0x7c, 0xc0, 0x7c, 0x21, 0x7d, 0x2e, 0x2e, 0x8f,
	0xd4, 0x9c, 0x9c, 0xfc, 0xf0, 0xfc, 0xa2, 0x9c, 0x14, 0x21, 0x7e, 0x3d, 0xa8, 0xb2, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x01, 0x98, 0x80, 0x7b, 0x51, 0x6a, 0x6a, 0x49, 0x66, 0x5e,
	0xba, 0x53, 0xf2, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8,
	0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xdd, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xa4, 0xd4, 0xbc, 0xec, 0x44, 0xdd, 0xdc, 0x54, 0xfd,
	0x9c, 0xc4, 0xa2, 0xd2, 0xe4, 0x8c, 0x54, 0xdd, 0xc4, 0x82, 0x4c, 0xfd, 0xf4, 0x7c, 0xdd, 0x82,
	0xec, 0x74, 0x7d, 0x88, 0x6d, 0x49, 0x6c, 0x60, 0x67, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb6, 0x6f, 0xed, 0xb1, 0xd0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LarapiClient is the client API for Larapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LarapiClient interface {
	HelloWorld(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Greeting, error)
}

type larapiClient struct {
	cc *grpc.ClientConn
}

func NewLarapiClient(cc *grpc.ClientConn) LarapiClient {
	return &larapiClient{cc}
}

func (c *larapiClient) HelloWorld(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/larapi.Larapi/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LarapiServer is the server API for Larapi service.
type LarapiServer interface {
	HelloWorld(context.Context, *Request) (*Greeting, error)
}

// UnimplementedLarapiServer can be embedded to have forward compatible implementations.
type UnimplementedLarapiServer struct {
}

func (*UnimplementedLarapiServer) HelloWorld(ctx context.Context, req *Request) (*Greeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}

func RegisterLarapiServer(s *grpc.Server, srv LarapiServer) {
	s.RegisterService(&_Larapi_serviceDesc, srv)
}

func _Larapi_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LarapiServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larapi.Larapi/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LarapiServer).HelloWorld(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Larapi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "larapi.Larapi",
	HandlerType: (*LarapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _Larapi_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc-larapi.proto",
}
